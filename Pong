import typing

import pygame 
pygame.init()

# Create the pygame screen 
WIDTH, HEIGHT  = 1000, 500
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("Pong")

BACKGROUND_COLOR: tuple or str = (25, 221,  142) 
OBJECT_COLOR: tuple or str = (91, 238, 194) 

PADDLE_WIDTH, PADDLE_HEIGHT = 20, 100

class Paddle:     
    PADDLE_VEL: int or float = 4

    def __init__(self, x: int or float, y: int or float, width: int or float, height: int or float):
        self.x = self.reset_x = x
        self.y = self.reset_y = y
        self.width = width
        self.height = height
    
    def move(self, up: bool):
        if up:
            self.y -= Paddle.PADDLE_VEL
        else:
            self.y += Paddle.PADDLE_VEL

    def reset(self):
        self.x = self.reset_x
        self.y = self.reset_y

BALL_RADIUS: int or float = 7

class Ball:
    MAX_BALL_VEL: int or float = (WIDTH * (1/3.5) + WIDTH) / 100   

    def __init__(self, x: int or float, y: int or float, radius: int or float): 
        self.x = self.reset_x = x 
        self.y = self.reset_y = y
        self.radius = radius
        self.x_vel = Ball.MAX_BALL_VEL
        self.y_vel = 0

    def move(self):
        self.x += self.x_vel 
        self.y += self.y_vel

    def reset(self):
        self.x = self.reset_y
        self.y = self.reset_y
        self.y_vel = 0
        self.x_vel *= -1


# Use ingame pygame functions and class Paddle and Ball methods to draw to pygame screen 
def draw(paddles: tuple[Paddle], ball: Ball, left_score: int, right_score: int) -> None:
    WIN.fill(BACKGROUND_COLOR)

    left_score_text = SCORE_FONT.render(str(left_score), 1, OBJECT_COLOR)
    right_score_text = SCORE_FONT.render(str(right_score), 1, OBJECT_COLOR)
    
    WIN.blit(left_score_text, (WIDTH//4 - left_score_text.get_width()//2, 20))
    WIN.blit(right_score_text, (WIDTH * (3/4) - right_score_text.get_width()//2, 20))

    for paddle in paddles:
        pygame.draw.rect(WIN, OBJECT_COLOR, (paddle.x, paddle.y, paddle.width, paddle.height))
    
    pygame.draw.circle(WIN, OBJECT_COLOR, (ball.x, ball.y), ball.radius)

    for i in range(10, HEIGHT, HEIGHT//20):
        if i % 2 == 0:
            pygame.draw.rect(WIN, OBJECT_COLOR, (WIDTH//2 - 5, i, 10, HEIGHT//20))

    pygame.display.update()

def collision(ball: Ball, left_paddle: Paddle, right_paddle: Paddle) -> None:
    # Ceiling or floor collision -> reverse the directional velocity 
    if ball.y + ball.radius >= HEIGHT or ball.y - ball.radius <= 0:
        ball.y_vel *= -1

    # Left paddle collision 
    if ball.x_vel < 0:
        if ball.y >= left_paddle.y and ball.y <= left_paddle.y + left_paddle.height:
            if ball.x - ball.radius <= left_paddle.x + left_paddle.width:
                ball.x_vel *= -1

                middle_y = left_paddle.y + left_paddle.height / 2
                difference_in_y = middle_y - ball.y
                reduction_factor = (left_paddle.height / 2) / ball.MAX_BALL_VEL
                y_vel = difference_in_y / reduction_factor
                ball.y_vel = -1 * y_vel
    
    # Right paddle collision 
    else:
        if ball.y >= right_paddle.y and ball.y <= right_paddle.y + right_paddle.height:
            if ball.x + ball.radius >= right_paddle.x:
                ball.x_vel *= -1

                middle_y = right_paddle.y + right_paddle.height / 2
                difference_in_y = middle_y - ball.y
                reduction_factor = (right_paddle.height / 2) / ball.MAX_BALL_VEL
                y_vel = difference_in_y / reduction_factor
                ball.y_vel = -1 * y_vel 


# Use the keys gathered by the input and check W, S, Up, and Down
def paddle_movement(left_paddle: Paddle, right_paddle: Paddle) -> None:
    if pygame.key.get_pressed()[pygame.K_w] and left_paddle.y - left_paddle.PADDLE_VEL >= 0:
        left_paddle.move(up = True)
    
    if pygame.key.get_pressed()[pygame.K_s] and left_paddle.y + left_paddle.PADDLE_VEL + left_paddle.height <= HEIGHT:
        left_paddle.move(up = False)

    if pygame.key.get_pressed()[pygame.K_UP] and right_paddle.y - right_paddle.PADDLE_VEL >= 0:
        right_paddle.move(up = True)
    
    if pygame.key.get_pressed()[pygame.K_DOWN] and right_paddle.y + right_paddle.PADDLE_VEL + right_paddle.height <= HEIGHT:
        right_paddle.move(up = False)

FPS: int = 60

SCORE_FONT = pygame.font.SysFont("comicsans", 50)
WINNING_SCORE: int = 4

# Game functionality 
def main() -> None:
    # Create all objects 
    left_paddle = Paddle(x = 10, y = HEIGHT//2 - PADDLE_HEIGHT//2, width = PADDLE_WIDTH, height = PADDLE_HEIGHT)
    right_paddle = Paddle(x = WIDTH - 10 - PADDLE_WIDTH, y = HEIGHT//2 - PADDLE_HEIGHT//2, width = PADDLE_WIDTH, height = PADDLE_HEIGHT)
    ball = Ball(x = WIDTH // 2, y = HEIGHT // 2, radius = BALL_RADIUS)

    left_score, right_score = 0, 0


    def reset(ball: Ball, paddles: tuple[Paddle], wait_seconds: int or float) -> None:
        # General reset settings when the the ball is scored or the game is ended 
        draw((left_paddle, right_paddle), ball, left_score, right_score)
        
        for paddle in paddles: 
            paddle.reset()
      
        ball.reset()

        pygame.time.delay(wait_seconds * 1000)
        pygame.display.update() 

    run = True

    while run:
        # Manage the speed of the wild loop (Change FPS var to adapt to the computers speed)
        pygame.time.Clock().tick(FPS)
        
        # left_paddle.y = ball.y - 33
        # right_paddle.y = ball.y - 33
        
        # Use objects as parameters 
        draw((left_paddle, right_paddle), ball, left_score, right_score)
       
        # Manage closing 
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                break 

        paddle_movement(left_paddle, right_paddle)

        ball.move()
        collision(ball, left_paddle, right_paddle)

        # Ball goes past left side of pygame screen 
        if ball.x < 0:
            right_score += 1
            reset(ball, (left_paddle, right_paddle), wait_seconds = 2)
        
        # Ball goes past right side of pygame screen 
        elif ball.x > WIDTH:
            left_score += 1
            reset(ball, (left_paddle, right_paddle), wait_seconds = 2)

        # Functionally that depends on who wins 
        won = False
        if left_score >= WINNING_SCORE:
            won = True
            win_text = "Left Player Won!"
        
        elif right_score >= WINNING_SCORE:
            won = True
            win_text = "Right Player Won!"

        # Functionally that does NOT depend on who wins 
        if won:
            text = SCORE_FONT.render(win_text, 1, OBJECT_COLOR)
            reset(ball, (left_paddle, right_paddle), wait_seconds = 5)
            left_score, right_score = 0, 0
     
    pygame.quit()

if __name__ == '__main__':
    main()
